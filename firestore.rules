rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function getUserRole(userId) {
      return get(/databases/$(database)/documents/users/$(userId)).data.role;
    }
    
    function isAdmin(userId) {
      return getUserRole(userId) == 'admin';
    }
    
    function isModerator(userId) {
      return getUserRole(userId) in ['admin', 'moderator'];
    }
    
    function canAccessChannel(channelId, userId) {
      let channel = get(/databases/$(database)/documents/channels/$(channelId)).data;
      let userRole = getUserRole(userId);
      return userRole in channel.permissions.read;
    }
    
    // Users collection
    match /users/{userId} {
      allow read: if isAuthenticated();
      allow write: if isAuthenticated() && 
        (request.auth.uid == userId || isAdmin(request.auth.uid));
      // Allow creation of user document during custom auth
      allow create: if isAuthenticated() && request.auth.uid == userId;
    }
    
    // Channels collection
    match /channels/{channelId} {
      allow read: if isAuthenticated() && 
        canAccessChannel(channelId, request.auth.uid);
      allow create: if isAuthenticated() && isModerator(request.auth.uid);
      allow update, delete: if isAuthenticated() && 
        (isAdmin(request.auth.uid) || 
         resource.data.createdBy == request.auth.uid);
    }
    
    // Messages collection
    match /messages/{messageId} {
      allow read: if isAuthenticated() && 
        canAccessChannel(resource.data.channelId, request.auth.uid);
      allow create: if isAuthenticated() && 
        request.auth.uid == resource.data.userId &&
        canAccessChannel(resource.data.channelId, request.auth.uid);
      allow update, delete: if isAuthenticated() && 
        (request.auth.uid == resource.data.userId || 
         isAdmin(request.auth.uid));
    }
    
    // Files collection
    match /files/{fileId} {
      allow read: if isAuthenticated() && 
        canAccessChannel(resource.data.channelId, request.auth.uid);
      allow create: if isAuthenticated() && 
        request.auth.uid == resource.data.uploadedBy;
      allow update, delete: if isAuthenticated() && 
        (request.auth.uid == resource.data.uploadedBy || 
         isAdmin(request.auth.uid));
    }
    
    // System settings (admin only)
    match /settings/{settingId} {
      allow read: if isAuthenticated();
      allow write: if isAuthenticated() && isAdmin(request.auth.uid);
    }
    
    // Test collection (for connection testing)
    match /_test/{testId} {
      allow read, write: if true;
    }
  }
}